Promise.resolve(1)
.then(x=>x+1) // 2
.then(x=>{throw new Error('my error')})
.catch(()=>1) 
.then(x=>x+1) // 2 
.then(x=>console.log(x)) // 2
.catch(console.err)


// EventLoop 浏览器 事件触发线程

// js是“主”线程是单线程的
// 应用 =》 进程 =》 线程 

// 浏览器 多进程模型
// 浏览器每个页卡都是一个独立的进程
// 浏览器的渲染进程 （浏览器内核）

// 浏览器的渲染进程  (页面渲染 线程 js执行 线程)
// js 和页面渲染是互斥的不能同时进行 （假如是多线程）

// 主线程是单线程 js代码从上到下 一行行执行 
// ajax 事件 promise （异步方法）  要等待同步代码执行完毕后 在执行异步代码
// 单独的线程去管理代码执行的逻辑 调度整个执行流程

// 进程是计算机分配任务的最小单位 =》 线程

// 宏任务 （宿主环境提供的 script） 微任务 (语言本身提供的)